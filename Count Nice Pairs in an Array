__Discription:__
  You are given an array nums that consists of non-negative integers. Let us define rev(x) as the reverse of the non-negative integer x. For example, rev(123) = 321, and rev(120) = 21. A pair of indices (i, j) is nice if it satisfies all of the following conditions:
  
  0 <= i < j < nums.length
  nums[i] + rev(nums[j]) == nums[j] + rev(nums[i])
  Return the number of nice pairs of indices. Since that number can be too large, return it modulo 109 + 7.

__Example 1:__
  Input: nums = [42,11,1,97]
  Output: 2
  
  __Explanation:__ The two pairs are:
   - (0,3) : 42 + rev(97) = 42 + 79 = 121, 97 + rev(42) = 97 + 24 = 121.
   - (1,2) : 11 + rev(1) = 11 + 1 = 12, 1 + rev(11) = 1 + 11 = 12.

__Example 2:__

  Input: nums = [13,10,35,24,76]
  Output: 4

__Code:__
  **class Solution {
     public int countNicePairs(int[] nums) {
          Map<Integer, Integer> freq = new HashMap<>();
          int count = 0;
          int mod = 1_000_000_007;
          for (int i = 0; i < nums.length; i++) {
              int rev = 0;
              int n = nums[i];
              while (n != 0) {
                  rev = rev * 10 + (n % 10);
                  n /= 10;
              }
              int diff = nums[i] - rev;
              count =(count+ freq.getOrDefault(diff, 0))%mod;
              freq.put(diff, freq.getOrDefault(diff, 0) + 1);
          }
          return count;
      }
  }**


__Time Complexity:__ O(n)

__Space Complexity:__ O(n)
