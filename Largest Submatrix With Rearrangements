DISCRIPTION:
    You are given a binary matrix matrix of size m x n, and you are allowed to rearrange the columns of the matrix in any order.
    
    Return the area of the largest submatrix within matrix where every element of the submatrix is 1 after reordering the columns optimally.

EXAMPLES:
    Example 1:
          Input: matrix = [[0,0,1],[1,1,1],[1,0,1]]
          Output: 4
          Explanation: You can rearrange the columns as shown above.
          The largest submatrix of 1s, in bold, has an area of 4.

    Example 2:
        Input: matrix = [[1,0,1,0,1]]
        Output: 3
        Explanation: You can rearrange the columns as shown above.
        The largest submatrix of 1s, in bold, has an area of 3.
    
    Example 3:
    Input: matrix = [[1,1,0],[1,0,1]]
    Output: 2
    Explanation: Notice that you must rearrange entire columns, and there is no way to make a submatrix of 1s larger than an area of 2.

CODE:
    class Solution {
        public int largestSubmatrix(int[][] matrix) {
            int r=matrix.length;
            int c=matrix[0].length;
            int result=0;
    
            // Prefix sum
            for(int row=0;row<r;row++){
                for(int col=0;col<c;col++){
                    if(matrix[row][col] !=0 && row>0)
                        matrix[row][col]+=matrix[row-1][col];
                }
                int curRow[]=matrix[row].clone();
                Arrays.sort(curRow);
                for(int i=0;i<c;i++)
                    result=Math.max(result, curRow[i]*(c-i));
            }
            
            return result;
        }
    }
