Problem Discription:
  Given a 0-indexed string s, permute s to get a new string t such that:
  - All consonants remain in their original places. More formally, if there is an index i with 0 <= i < s.length such that s[i] is a consonant, then t[i] = s[i].
  - The vowels must be sorted in the nondecreasing order of their ASCII values. 
  - More formally, for pairs of indices i, j with 0 <= i < j < s.length such that s[i] and s[j] are vowels, then t[i] must not have a higher ASCII value than t[j].
  - Return the resulting string.
  - The vowels are 'a', 'e', 'i', 'o', and 'u', and they can appear in lowercase or uppercase. Consonants comprise all letters that are not vowels.

Example:
  - Input: s = "lEetcOde"
  - Output: "lEOtcede"
  - Explanation: 'E', 'O', and 'e' are the vowels in s; 'l', 't', 'c', and 'd' are all consonants. The vowels are sorted according to their ASCII values, and the consonants remain in the same places.


Explanation: 
  - Intuition
      Sort vowels in String is a medium level with the concepts of string and sort. 
  - Approach
      This problem contains 3 major steps. This is an example of brute force approach.

        Step-1 : Convert the given string into character array.Copy all the vowels present in the array to the array, resresres.

        Step-2 : Sort the array resresres. Take another pointer say, jjj. Move the pointer untill an alphabet obtained.

        Step-3 : Replace the index of temptemptemp contains with vowel with new sorted vowels. Convert the character array temptemptemp and return the result string.

  - Complexity
      Time complexity: O(n log n)

      Space complexity: O(n)

Code :

class Solution {
    public boolean isVowel(char a){
        return a=='a' || a=='e' || a=='i' || a=='o' || a=='u' || a=='A' || a=='E'||a=='I'|| a=='O' || a=='U';
    }
    public String sortVowels(String s) {
        char temp[]=s.toCharArray();
        char res[]=new char[temp.length];
        int j=0;
        for(int i=0;i<temp.length;i++){
            if(isVowel(temp[i])){
                res[j++]=temp[i];
            }
        }
        Arrays.sort(res);
        j=0;
        for(int i=0;i<res.length;i++){
            if(!Character.isAlphabetic(res[i]))
                j++;
        }
        for(int i=0;i<temp.length;i++){
            if(isVowel(temp[i]))
                temp[i]=res[j++];
        }
        return new String(temp);
    }
}
